@using Pim.CommonLib
@using PimWeb.AppCode
@model PimWeb.Models.FileViewModel

@using (Html.BeginForm("DeleteFilePermanently", "ViewEdit", FormMethod.Post, new { id = "mainForm", @class = "" }))
{
    <div class="caption"><h2>File: @Model.Title</h2><hr/></div>

    @Html.HiddenFor(x => x.Version)
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <br />
    @if (ViewBag.Edit == true)
    {
        <div class="row g-0 my-2">
            @Html.LabelFor(x => x.Title)
            @Html.TextBoxFor(x => x.Title, new {@class="form-control"})
            @Html.ValidationMessageFor(x => x.Title, "", new { @class = "text-danger" })
        </div>
    }

    <div class="my-2">
        @Html.HiddenFor(model => model.Id)
        @Html.LabelFor(x => x.Description)
        @if (ViewBag.Edit == true)
        {
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "height: 20em" })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        }
        else
        {
            <div style="white-space: pre-wrap; overflow-x: auto" class="border border-1 border-secondary rounded-1 p-1">
                @Model.Description
            </div>
        }
    </div>

    <hr/>

    <div class="row my-1">
        <label class="col-md-2">Original Name</label>
        <span class="col-md-10">@(System.IO.Path.GetFileName(Model.RelativePath))</span>
    </div>

    @if (!Model.ExistsOnDisk || Model.ContentHashMismatch)
    {
        <div class="row my-1">
            <label class="col-md-2">Status</label>
            <div class="col-md-10">
                @if (Model.ExistsOnDisk)
                {
                    if (Model.ContentHashMismatch)
                    {
                        <span class="text-danger">Hash mismatch - file was modified after upload!</span>
                    }
                }
                else
                {
                    <span class="text-danger">Missing from storage</span>
                }
            </div>
        </div>
    }

    <div class="row my-1">
        @Html.LabelFor(m => m.CreateTime, new { @class = "col-md-2" })
        <span class="col-md-10">@Html.DisplayFor(m => m.CreateTime)</span>
    </div>

    <div class="row my-1">
        @Html.LabelFor(m => m.LastUpdateTime, new { @class = "col-md-2" })
        <span class="col-md-10">@Html.DisplayFor(m => m.LastUpdateTime)</span>
    </div>

    <div class="row my-1">
        @Html.LabelFor(m => m.Version, new { @class = "col-md-2" })
        <span class="col-md-10">@Html.DisplayFor(m => m.Version)</span>
    </div>

    @if (ViewBag.Edit == true)
    {
        <div class="row my-2">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnUpdate" type="submit" value="Update" class="btn btn-outline-primary" />
                &nbsp;
                <input type="submit" id="btnDelete" class="btn btn-warning" value="Delete" />
            </div>
        </div>
    }

    <div class="my-2">
        @Html.ActionLink("Back to home page", "Index", "Home")
    
        @if (Model.Version.HasValue)
        {
            var edit = ViewBag.Edit == true;
            var altModeLinkText = edit ? "View read only" : "Edit";
            @: |
            <a href="@Url.Action("File", new {id = Model.Id, edit = !edit})">@altModeLinkText</a>
            @if (Model.ExistsOnDisk)
            {
                var statusClass = Model.ContentHashMismatch ? "text-danger" : "";
                var title = Model.ContentHashMismatch ? "Hash mismatch - file was modified after upload!" : "";
                @: |
                @Html.ActionLink("Download/view", "DownloadFile", "Search", new { id = Model.Id }
                    , new
                    {
                        @class = statusClass,
                        title = title
                    })
            }
        }
    </div>
    
    <div class="card my-2">
        <div class="card-header">
            Associated Notes
        </div>
        <div class="card-body">
            @await Html.PartialAsync("NoteList", Model.Notes)
        </div>
    </div>

    @if (!Model.ExtractedText.IsNullOrWhiteSpace())
    {
        <div class="card my-2">
            <div class="card-header">Extracted text</div>
            <div class="card-body">
                <div style="white-space: pre-wrap; overflow-x: auto" class="text-muted small">@Model.ExtractedText.Ellipsify(0, 128*1024)</div>
            </div>
        </div>
    }
}
